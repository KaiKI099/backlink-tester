const axios = require('axios');

async function testDiscovery() {
  const baseURL = 'http://localhost:3000';
  
  // Test data with relevant keywords that should find forums and communities
  const testData = {
    keywords: 'web development programming',
    targetUrl: 'https://my-dev-blog.com'
  };

  console.log('üß™ Testing Automated Backlink Discovery Workflow...\n');

  try {
    console.log('üìã Test Parameters:');
    console.log('- Keywords:', testData.keywords);
    console.log('- Target URL:', testData.targetUrl);
    console.log('\nüîç Starting discovery and analysis...\n');
    
    const startTime = Date.now();
    const response = await axios.post(`${baseURL}/api/discover`, testData, {
      headers: {
        'Content-Type': 'application/json',
      },
      timeout: 300000 // 5 minute timeout for multiple analyses
    });

    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;

    console.log(`‚úÖ Discovery completed in ${Math.round(duration)} seconds\n`);
    
    if (response.data.success) {
      const { results, summary } = response.data;
      
      console.log('üìä DISCOVERY SUMMARY:');
      console.log(`- Pages Discovered: ${summary.discoveredPages}`);
      console.log(`- Pages Analyzed: ${summary.totalAnalyzed}`);
      console.log(`- Opportunities Found: ${summary.opportunitiesFound}`);
      console.log(`- Average Confidence: ${summary.averageConfidence}%\n`);
      
      console.log('üéØ DETAILED ANALYSIS RESULTS:\n');
      
      results.forEach((result, index) => {
        console.log(`--- PAGE ${index + 1} ---`);
        console.log(`üåê URL: ${result.pageData.url}`);
        console.log(`üìù Title: ${result.pageData.title || 'No title'}`);
        
        if (result.discoveryInfo) {
          console.log(`üîç Discovery Source: ${result.discoveryInfo.source}`);
          console.log(`üìã Original Title: ${result.discoveryInfo.title}`);
        }
        
        const analysis = result.analysis;
        console.log(`üéØ Opportunity: ${analysis.isOpportunity ? '‚úÖ YES' : '‚ùå NO'}`);
        console.log(`üìà Confidence: ${analysis.confidence}%`);
        console.log(`üè∑Ô∏è Page Type: ${analysis.pageType}`);
        console.log(`‚ö° Difficulty: ${analysis.difficulty}`);
        console.log(`üí° Reason: ${analysis.reason}`);
        
        if (analysis.isOpportunity) {
          console.log(`üé™ Recommended Action: ${analysis.recommendedAction}`);
          console.log(`üìç Context: ${analysis.backlinkContext}`);
        }
        
        // Interactive features
        const features = result.pageData.interactiveFeatures;
        const foundFeatures = [];
        if (features.hasComments) foundFeatures.push('üí¨ Comments');
        if (features.hasContactForm) foundFeatures.push('üìß Contact Form');
        if (features.hasForum) foundFeatures.push('üí¨ Forum');
        if (features.hasUserProfiles) foundFeatures.push('üë§ User Profiles');
        if (features.hasLoginForm) foundFeatures.push('üîê Login Form');
        if (features.hasRegistration) foundFeatures.push('üìù Registration');
        if (features.hasContentSubmission) foundFeatures.push('üì§ Content Submission');
        if (features.hasSocialSharing) foundFeatures.push('üîó Social Sharing');
        
        console.log(`üîß Interactive Features: ${foundFeatures.length > 0 ? foundFeatures.join(', ') : 'None detected'}`);
        console.log(''); // Empty line between results
      });
      
      // Analysis summary
      const opportunities = results.filter(r => r.analysis.isOpportunity);
      if (opportunities.length > 0) {
        console.log('üéâ TOP OPPORTUNITIES:');
        opportunities
          .sort((a, b) => b.analysis.confidence - a.analysis.confidence)
          .slice(0, 3)
          .forEach((opp, i) => {
            console.log(`${i + 1}. ${opp.pageData.url} (${opp.analysis.confidence}% confidence)`);
            console.log(`   Action: ${opp.analysis.recommendedAction}`);
          });
      }
      
      console.log('\n‚ú® Automated discovery test completed successfully!');
    } else {
      console.log('‚ùå Discovery failed:', response.data.error);
    }

  } catch (error) {
    console.log('‚ùå Test failed with error:');
    if (error.response) {
      console.log('Status:', error.response.status);
      console.log('Error:', error.response.data);
    } else if (error.request) {
      console.log('No response received:', error.message);
    } else {
      console.log('Request setup error:', error.message);
    }
  }
}

// Run the test
testDiscovery();